@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManager;
@inject UserManager<IdentityUser> userManager;

@model BloggieWeb.Models.ViewModels.BlogDetailsViewModel
@{
    ViewData["Title"] = Model.PageTitle;
}

<div class="container">
    <section class="section-article my-5 py-5">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-8 mb-5">

                @if (Model != null)
                {
                <div class="article-head text-center">
                    <h2 class="mb-3">@Model.Heading</h2>
                    <div class="row mb-3">
                        <span class="article-author mb-3">By @Model.Author</span>
                        <span class="article-date mb-3">@Model.PublishedDate.ToLongDateString()</span>


                        <div class="mb-3">
                            @if (signInManager.IsSignedIn(User))
                            {
                                if (Model.Liked)
                                {
                                    //user already liked so the thumb button trigger(btnLike) for
                                    // addLikeForBlog func will not showed
                                    <a style="cursor:pointer;">
                                            <i class='bx bxs-like'></i>
                                    </a>
                                }
                                else
                                {
                                    <a id="btnLike" style="cursor:pointer;">
                                            <i class='bx bx-like'></i>
                                    </a>
                                }


                            }
                            <span id="totalLikes">@Model.TotalLikes likes</span>
                        </div>
                    </div>
                    </div>



                    <img src="@Model.FeaturedImageUrl" class="d-block img-fluid mb-3" />
                    <div class="mb-3 blog-details-content">
                        @Html.Raw(@Model.Content) <!--parsing the html and showing just only text result w/o the html tags-->
                    </div>
                    <div class="mb-5 d-flex">
                        Tags:
                        @foreach (var tag in Model.Tags)
                        {
                            <span class="mx-2 text-tags">@tag.Name</span>
                        }
                    </div>

                    <div class="card rounded-0">
                        <div class="card-header bg-body-secondary p-3 border-0">
                            <h6 class="text-head-comments">Leave a Discussion</h6>
                            @if (signInManager.IsSignedIn(User))
                            {
                                <form method="POST">
                                    <div class="mb-3">
                                       
                                        <textarea class="form-control rounded-0" asp-for="CommentDescription"></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <div class="text-end">
                                        <button type="submit" class="btn btn-dark rounded-0">Send Comment</button>
                                        </div>
                                        <!--when it stored, id post blog nya juga ikut ke store dgn komentarnya-->
                                        <input type="hidden" asp-for="Id" />
                                        <input type="hidden" asp-for="UrlHandle" />
                                    </div>
                                </form>
                            }
                        </div>
                        <div class="card-body">
                            @if (Model.Comments != null && Model.Comments.Any())
                            {
                                @foreach (var comment in Model.Comments)
                                {

                                    <div class="card rounded-0 mb-3">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between comment-col">
                                                <span class="text-user pb-3">@comment.Username</span>
                                                <span class="text-date">@comment.DateAdded.ToLongDateString()</span>
                                            </div>
                                            <div>
                                                @comment.Description
                                            </div>
                                        </div>
                                    </div>
                                }
                            }else{
                                <div class="text-center">
                                   There's no comment.
                                </div>
                           
                            }
                        </div>  
                    </div>
                }
                else
                {
                    <p>Blog post not found!.</p>
                }

            </div>
        </div>
    </section>
</div>

@section Scripts {
    <script>
        const btnLikeElement = document.getElementById('btnLike');
        const totalLikesElement = document.getElementById('totalLikes');

        async function getTotalLikes() { // bcs GET method don't required a body
            fetch('/api/blogpostlike/@Model.Id/totalLikes', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                }
            })
                .then(data => data.json())
                .then(result => totalLikesElement.innerHTML = result);
        }

        async function addLikeForBlog() { // for action method using fetch
            fetch('/api/BlogPostLike/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({
                    blogPostId: '@Model.Id',
                    userId: '@userManager.GetUserId(User)'
                }) // the name should be matches wth the name of request object inside the controller
            })
                .then(() => {
                    btnLikeElement.innerHTML = '<i class="bx bxs-like"></i>'; // if btnLike was clicked, change the icon into fill thumb
                    btnLikeElement.removeEventListener('click', addLikeForBlog); // then user no longer using the click btn again
                    getTotalLikes();
                });
        }

        btnLikeElement.addEventListener('click', addLikeForBlog);

    </script>
}