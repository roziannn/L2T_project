@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManager;
@inject UserManager<IdentityUser> userManager;

@model BloggieWeb.Models.ViewModels.BlogDetailsViewModel
@{
    ViewData["Title"] = Model.PageTitle;
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">

            @if (Model != null)
            {
                <h1 class="mb-3">@Model.Heading</h1>
                <div class="d-flex justify-content-between mb-3">
                    <span class="text-secondary">@Model.Author</span>
                    <span class="text-secondary">@Model.PublishedDate.ToShortDateString()</span>
                </div>

                <div class="mb-3">
                    @if (signInManager.IsSignedIn(User))
                    {
                        if (Model.Liked)
                        {
                            //user already liked so the thumb button trigger(btnLike) for
                            // addLikeForBlog func will not showed
                            <a style="cursor:pointer;">
                                <i class="bi bi-hand-thumbs-up-fill"></i>
                            </a>
                        }
                        else
                        {
                            <a id="btnLike" style="cursor:pointer;">
                                <i class="bi bi-hand-thumbs-up"></i>
                            </a>
                        }


                    }
                    <span id="totalLikes">@Model.TotalLikes likes</span>
                </div>

                <div class="mb-3 d-flex">
                    @foreach (var tag in Model.Tags)
                    {
                        <span class="badge bg-secondary me-1">@tag.Name</span>
                    }
                </div>

                <img src="@Model.FeaturedImageUrl" class="d-block img-fluid mb-3" />
                <div class="mb-3 blog-details-content">
                    @Html.Raw(@Model.Content) <!--parsing the html and showing just only text result w/o the html tags-->
                </div>
            }
            else
            {
                <p>Blog post not found!.</p>
            }

        </div>
    </div>
</div>

@section Scripts {
    <script>
        const btnLikeElement = document.getElementById('btnLike');
        const totalLikesElement = document.getElementById('totalLikes');

        async function getTotalLikes() { // bcs GET method don't required a body
            fetch('/api/blogpostlike/@Model.Id/totalLikes', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                }
            })
                .then(data => data.json())
                .then(result => totalLikesElement.innerHTML = result);
        }

        async function addLikeForBlog() { // for action method using fetch
            fetch('/api/BlogPostLike/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({
                    blogPostId: '@Model.Id',
                    userId: '@userManager.GetUserId(User)'
                }) // the name should be matches wth the name of request object inside the controller
            })
                .then(() => {
                    btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>'; // if btnLike was clicked, change the icon into fill thumb
                    btnLikeElement.removeEventListener('click', addLikeForBlog); // then user no longer using the click btn again
                    getTotalLikes();
                });
        }

        btnLikeElement.addEventListener('click', addLikeForBlog);

    </script>
}